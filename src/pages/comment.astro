---
// /Users/Mati/Desktop/yuppie-web/src/pages/comment.astro
import Layout from '../layouts/Layout.astro';
import { CommentForm } from '../components/feedback/Comment';
import { getRestaurant } from '../services/api';

// Obtener los IDs y validar
const documentId = Astro.url.searchParams.get('local');
const employeeDocumentId = Astro.url.searchParams.get('employee');

if (!documentId) {
  return Astro.redirect('/');
}

// Manejo optimizado de datos del restaurante
let cachedRestaurantName = '';
let useCache = false;

// Verificar si podemos usar cach√©
if (Astro.request.headers.get('sec-fetch-dest') !== 'document') {
  useCache = true;
}

// Obtener datos del restaurante (en paralelo con la renderizaci√≥n)
const restaurantPromise = getRestaurant(documentId).catch(error => {
  console.error('Error obteniendo datos del restaurante:', error);
  return null;
});

// Extraer ID num√©rico si ya tenemos el restaurante
const restaurant = await restaurantPromise;
const restaurantId = restaurant ? restaurant.id.toString() : '';
const restaurantName = restaurant?.name || 'Restaurante';
---

<Layout title={`Deja tu comentario - ${restaurantName}`}>
  <div class="min-h-screen bg-gradient flex flex-col items-center justify-center p-4">
    <div class="w-full max-w-md">
      <h1 id="restaurantName" class="text-4xl font-bold mb-6 text-center text-shadow">
        {restaurantName}
      </h1>

      <div class="card p-6">
        <h2 class="text-2xl font-semibold mb-4 text-center">D√©janos tu comentario</h2>
        <CommentForm 
          restaurantId={restaurantId} 
          restaurantDocumentId={documentId}
          employeeDocumentId={employeeDocumentId || undefined}
          client:load
        />
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ documentId }}>
  // Protegerse contra redirects infinitos
  document.addEventListener('DOMContentLoaded', () => {
    // Verificar si hay un redirect loop
    const isRedirecting = localStorage.getItem('redirecting_from_comment');
    if (isRedirecting) {
      console.warn('Detectado posible bucle de redirecci√≥n, limpiando flags');
      localStorage.removeItem('redirecting_from_comment');
    }

    // Actualizar nombre del restaurante si es necesario
    const restaurantNameElement = document.getElementById('restaurantName');
    if (!restaurantNameElement) return;
      
    try {
      const cachedData = localStorage.getItem(`restaurant_${documentId}`);
      if (cachedData) {
        const { name, timestamp } = JSON.parse(cachedData);
        const cacheAge = Date.now() - timestamp;
        
        // Si la cach√© tiene menos de 1 hora, usarla
        if (cacheAge < 3600000 && name && restaurantNameElement) {
          restaurantNameElement.textContent = name;
        }
      }
      
      // Precargar emojis para asegurar disponibilidad
      const preloadEmojis = () => {
        const emojis = ['üéâ', 'üëç', '‚úÖ'];
        const preloadDiv = document.createElement('div');
        preloadDiv.style.opacity = '0';
        preloadDiv.style.position = 'absolute';
        preloadDiv.style.pointerEvents = 'none';
        preloadDiv.textContent = emojis.join('');
        document.body.appendChild(preloadDiv);
        
        setTimeout(() => {
          if (document.body.contains(preloadDiv)) {
            document.body.removeChild(preloadDiv);
          }
        }, 1000);
      };
      
      // Usar requestIdleCallback para operaciones no cr√≠ticas
      if (window.requestIdleCallback) {
        window.requestIdleCallback(preloadEmojis);
      } else {
        setTimeout(preloadEmojis, 1000);
      }
      
    } catch (e) {
      console.error('Error al leer cach√© local:', e);
    }
  });
</script>

<style>
  .card {
    transition: transform 0.3s ease;
    will-change: transform;
  }
  
  .card:hover {
    transform: translateY(-5px);
  }
  
  /* Optimizaciones de rendimiento */
  @media (prefers-reduced-motion: reduce) {
    .card {
      transition: none;
    }
    .card:hover {
      transform: none;
    }
  }
  
  /* Evitar saltos de contenido */
  .min-h-screen {
    min-height: 100vh;
    min-height: calc(var(--vh, 1vh) * 100);
  }
</style>

<script>
  // Ajustar altura en m√≥viles
  function setVh() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
  }
  
  // Ejecutar al cargar y al cambiar tama√±o
  window.addEventListener('DOMContentLoaded', setVh);
  window.addEventListener('resize', setVh);
</script>