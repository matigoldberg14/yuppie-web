---
// /Users/Mati/Desktop/yuppie-web/src/pages/comment.astro
import Layout from '../layouts/Layout.astro';
import { CommentForm } from '../components/feedback/CommentForm';
import { getRestaurant } from '../services/api';

// Obtener los IDs y validar
const documentId = Astro.url.searchParams.get('local');
const employeeDocumentId = Astro.url.searchParams.get('employee');

if (!documentId) {
  return Astro.redirect('/404');
}

// Manejo optimizado de datos del restaurante
let cachedRestaurantName = '';
let useCache = false;

// Verificar si podemos usar cach√©
if (Astro.request.headers.get('sec-fetch-dest') !== 'document') {
  useCache = true;
}

try {
  // Intentar obtener nombre del restaurante de localStorage (client-side)
  if (useCache) {
    // Este c√≥digo solo se ejecuta en el cliente, no en SSR
    const cachedData = localStorage.getItem(`restaurant_${documentId}`);
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      cachedRestaurantName = parsed.name || '';
    }
  }
} catch (e) {
  // Ignorar errores de localStorage en SSR
}

// Obtener datos del restaurante (en paralelo con la renderizaci√≥n)
const restaurantPromise = getRestaurant(documentId).catch(error => {
  console.error('Error obteniendo datos del restaurante:', error);
  return null;
});

// Extraer ID num√©rico si ya tenemos el restaurante
const restaurant = await restaurantPromise;
const restaurantId = restaurant ? restaurant.id.toString() : '';
const restaurantName = restaurant?.name || cachedRestaurantName || 'Restaurante';
---

<Layout title={`Deja tu comentario - ${restaurantName}`}>
  <div class="min-h-screen bg-gradient flex flex-col items-center justify-center p-4">
    <div class="w-full max-w-md">
      <h1 id="restaurantName" class="text-4xl font-bold mb-6 text-center text-shadow">
        {restaurantName}
      </h1>

      <div class="card p-6">
        <h2 class="text-2xl font-semibold mb-4 text-center">D√©janos tu comentario</h2>
        <CommentForm 
        restaurantId={restaurantId} 
        restaurantDocumentId={documentId}
        employeeDocumentId={employeeDocumentId || undefined}
        client:load
      />
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ documentId, restaurantPromise }}>
  // Script optimizado para mejorar rendimiento
  document.addEventListener('DOMContentLoaded', async () => {
    const restaurantNameElement = document.getElementById('restaurantName');
    
    // Verificar si ya hay datos en localStorage para mostrar inmediatamente
    try {
      const cachedData = localStorage.getItem(`restaurant_${documentId}`);
      if (cachedData) {
        const { name, timestamp } = JSON.parse(cachedData);
        const cacheAge = Date.now() - timestamp;
        
        // Si la cach√© tiene menos de 1 hora, usarla
        if (cacheAge < 3600000 && name && restaurantNameElement) {
          restaurantNameElement.textContent = name;
        }
      }
      
      // Precargar emojis para asegurar disponibilidad
      const preloadEmojis = () => {
        const emojis = ['üéâ', 'üëç', '‚úÖ'];
        const preloadDiv = document.createElement('div');
        preloadDiv.style.opacity = '0';
        preloadDiv.style.position = 'absolute';
        preloadDiv.style.pointerEvents = 'none';
        preloadDiv.textContent = emojis.join('');
        document.body.appendChild(preloadDiv);
        
        setTimeout(() => {
          if (document.body.contains(preloadDiv)) {
            document.body.removeChild(preloadDiv);
          }
        }, 1000);
      };
      preloadEmojis();
      
    } catch (e) {
      console.error('Error al leer cach√© local:', e);
    }
    
    // Obtener datos frescos del servidor en paralelo
    try {
      const restaurant = await restaurantPromise;
      if (restaurant && restaurant.name && restaurantNameElement) {
        // Actualizar UI solo si es necesario
        if (restaurantNameElement.textContent !== restaurant.name) {
          restaurantNameElement.textContent = restaurant.name;
        }
        
        // Actualizar t√≠tulo de p√°gina
        document.title = `Deja tu comentario - ${restaurant.name}`;
        
        // Actualizar cach√©
        localStorage.setItem(`restaurant_${documentId}`, JSON.stringify({
          name: restaurant.name,
          timestamp: Date.now()
        }));
      }
    } catch (error) {
      console.error('Error cargando datos del restaurante:', error);
    }
  });
</script>

<style>
  .card {
    transition: transform 0.3s ease;
    will-change: transform;
  }
  .card:hover {
    transform: translateY(-5px);
  }
  
  /* Optimizaciones de rendimiento */
  @media (prefers-reduced-motion: reduce) {
    .card {
      transition: none;
    }
    .card:hover {
      transform: none;
    }
  }
</style>