---
// src/pages/[restaurantName].astro
// Página única que maneja todos los casos sin redirecciones

import Layout from '../layouts/Layout.astro';
import { RatingForm } from '../components/feedback/Rating';
import { ImprovementSelector } from '../components/feedback/ImprovementSelector';
import { CommentForm } from '../components/feedback/CommentForm';
import { incrementTaps } from '../services/api';

// Obtener parámetros de la URL
const { restaurantName } = Astro.params;
const employeeId = Astro.url.searchParams.get('e');
const action = Astro.url.searchParams.get('a') || 'rating'; // Por defecto, mostrar rating

console.log('=== Inicio procesamiento ===');
console.log('Parámetros:', { restaurantName, employeeId, action });

// Validar parámetros
if (!restaurantName) {
  console.log('Error: Nombre de restaurante no proporcionado');
  return Astro.redirect('/');
}

// Función para normalizar el nombre del restaurante
function normalizeRestaurantName(name: string): string {
  return name
    .toString()
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^\w\-]+/g, '-')
    .replace(/--+/g, '-')
    .replace(/^-+/, '')
    .replace(/-+$/, '');
}

// Buscar restaurante por nombre normalizado
async function findRestaurantByNormalizedName(normalizedName: string) {
  try {
    console.log('Buscando restaurante con nombre normalizado:', normalizedName);

    const response = await fetch(
      `${import.meta.env.PUBLIC_API_URL}/restaurants?populate=*`
    );
    if (!response.ok) {
      console.error('Error en respuesta API:', response.status);
      return null;
    }

    const data = await response.json();

    // Validar estructura de datos
    if (!data.data || !Array.isArray(data.data)) {
      console.error('Estructura de datos inesperada:', data);
      return null;
    }

    // Buscar coincidencia por nombre normalizado
    const restaurant = data.data.find((r: any) => {
      const name = r.name || r.attributes?.name || '';
      if (!name) return false;

      const nameNormalized = normalizeRestaurantName(name);
      console.log(`Comparando: "${nameNormalized}" con "${normalizedName}"`);
      return nameNormalized === normalizedName;
    });

    if (restaurant) {
      console.log('¡Restaurante encontrado!', {
        id: restaurant.id,
        name: restaurant.name || restaurant.attributes?.name,
        documentId: restaurant.documentId || restaurant.attributes?.documentId,
      });
    } else {
      console.log('Ningún restaurante coincide con:', normalizedName);
    }

    return restaurant || null;
  } catch (error) {
    console.error('Error buscando restaurante:', error);
    return null;
  }
}

// Normalizar nombre y buscar restaurante
const normalizedName = normalizeRestaurantName(restaurantName);
console.log('Nombre normalizado:', normalizedName);
const restaurant = await findRestaurantByNormalizedName(normalizedName);

if (!restaurant) {
  console.log('No se encontró el restaurante, redirigiendo a ');
  return Astro.redirect('/');
}

// Obtener datos del restaurante (adaptando a diferentes estructuras posibles)
let restaurantDocumentId, restaurantId, restaurantDisplayName, linkMaps;

// Determinar si los datos están en la raíz o dentro de attributes
if (restaurant.attributes) {
  // Estructura nueva de Strapi
  restaurantDocumentId = restaurant.attributes.documentId;
  restaurantId = restaurant.id;
  restaurantDisplayName = restaurant.attributes.name;
  linkMaps = restaurant.attributes.linkMaps;
} else {
  // Estructura antigua o personalizada
  restaurantDocumentId = restaurant.documentId;
  restaurantId = restaurant.id;
  restaurantDisplayName = restaurant.name;
  linkMaps = restaurant.linkMaps;
}

console.log('Datos extraídos:', {
  restaurantDocumentId,
  restaurantId,
  restaurantDisplayName,
  linkMaps,
});

if (!restaurantDocumentId) {
  console.log('No se pudo extraer documentId, redirigiendo a ');
  return Astro.redirect('/');
}

// Incrementar contador de visitas
try {
  await incrementTaps(restaurantDocumentId);
  console.log('Taps incrementado para:', restaurantDocumentId);
} catch (err) {
  console.error('Error incrementando taps:', err);
}

// Verificar empleado si se especificó
let employeeDocumentId = null;
let employeeIdNum = null;

if (employeeId) {
  employeeIdNum = parseInt(employeeId, 10);
  if (!isNaN(employeeIdNum)) {
    console.log('Buscando empleado con ID:', employeeIdNum);

    //

    const suCasaEmployees: Record<number, number> = {
      126: 1,
      128: 2,
      130: 3,
      132: 4,
      134: 5,
      136: 6,
      138: 7,
      140: 8,
      142: 9,
      146: 10,
      149: 11,
      150: 12,
      152: 13,
      154: 14,
      162: 15,
      161: 16,
      160: 17,
    };

    try {
      let url = `${import.meta.env.PUBLIC_API_URL}/employees?filters[id][$eq]=${employeeIdNum}&populate=*`;
      if (restaurantDocumentId === 'zm66841un2bkqmq8lkk92bon') {
        url = `${import.meta.env.PUBLIC_API_URL}/employees?filters[firstName][$startsWith]=${suCasaEmployees[employeeIdNum]}&populate=*`;
      }
      const employeeResponse = await fetch(url);

      if (employeeResponse.ok) {
        const employeeData = await employeeResponse.json();
        console.log('Respuesta de empleado:', employeeData);

        const employee = employeeData.data?.[0];

        if (employee) {
          if (employee.attributes) {
            employeeDocumentId = employee.attributes.documentId;
          } else {
            employeeDocumentId = employee.documentId;
          }
          console.log('Empleado encontrado, documentId:', employeeDocumentId);
        } else {
          console.log('No se encontró el empleado con ID:', employeeIdNum);
        }
      } else {
        console.error('Error en API de empleados:', employeeResponse.status);
      }
    } catch (error) {
      console.error('Error buscando empleado:', error);
    }
  } else {
    console.log('ID de empleado no es un número válido:', employeeId);
  }
}

// Generar URLs para navegación
const ratingUrl = `/${normalizedName}`;
const improvementUrl = `/${normalizedName}?a=improvement${employeeId ? `&e=${employeeId}` : ''}`;
const commentUrl = `/${normalizedName}?a=comment${employeeId ? `&e=${employeeId}` : ''}`;
const thanksUrl = `/${normalizedName}?a=thanks${employeeId ? `&e=${employeeId}` : ''}`;

// Determinar título de página
let pageTitle = '';
if (action === 'improvement') {
  pageTitle = `¿En qué podríamos mejorar? - ${restaurantDisplayName}`;
} else if (action === 'comment') {
  pageTitle = `Deja tu comentario - ${restaurantDisplayName}`;
} else if (action === 'thanks') {
  pageTitle = `Gracias por tu opinión - ${restaurantDisplayName}`;
} else {
  pageTitle = `Califica tu experiencia - ${restaurantDisplayName}`;
}
---

<Layout title={pageTitle}>
  <div
    class='min-h-screen bg-gradient flex flex-col items-center justify-center p-4'
  >
    <div class='w-full max-w-md'>
      <h1 class='text-4xl font-bold mb-6 text-center text-shadow'>
        {restaurantDisplayName}
      </h1>

      <div class='card p-6'>
        {
          action === 'rating' && (
            <>
              <h2 class='text-2xl font-semibold mb-4 text-center'>
                Califica tu experiencia
              </h2>
              <div class='emoji-container'>
                <RatingForm
                  client:load
                  restaurantId={restaurantId.toString()}
                  restaurantDocumentId={restaurantDocumentId}
                  employeeDocumentId={employeeDocumentId}
                  employeeId={employeeIdNum}
                  nextUrl={improvementUrl}
                  linkMaps={linkMaps}
                  useNewUrlFormat={true}
                  restaurantSlug={normalizedName}
                />
              </div>
            </>
          )
        }

        {
          action === 'improvement' && (
            <>
              <h2 class='text-2xl font-semibold mb-4 text-center'>
                ¿En qué podríamos mejorar?
              </h2>
              <ImprovementSelector
                restaurantDocumentId={restaurantDocumentId}
                restaurantId={restaurantId}
                employeeDocumentId={employeeDocumentId}
                employeeId={employeeIdNum}
                nextUrl={commentUrl}
                useNewUrlFormat={true}
                restaurantSlug={normalizedName}
                client:load
              />
            </>
          )
        }

        {
          action === 'comment' && (
            <>
              <h2 class='text-2xl font-semibold mb-4 text-center'>
                Déjanos tu comentario
              </h2>
              <CommentForm
                restaurantId={restaurantId.toString()}
                restaurantDocumentId={restaurantDocumentId}
                employeeDocumentId={employeeDocumentId}
                employeeId={employeeIdNum}
                nextUrl={thanksUrl}
                useNewUrlFormat={true}
                restaurantSlug={normalizedName}
                client:load
              />
            </>
          )
        }

        {
          action === 'thanks' && (
            <>
              <h2 class='text-3xl font-bold text-white text-center'>
                ¡Gracias por ayudarnos a mejorar!
              </h2>
              <p class='text-lg text-gray-200 mt-4 text-center'>
                Tu opinión es muy valiosa para nosotros y nos ayuda a ofrecer
                una mejor experiencia.
              </p>
              <div class='flex justify-center mt-6'>
                <a
                  href='https://www.instagram.com/yuppie.ar/'
                  target='_blank'
                  rel='noopener noreferrer'
                  class='text-gray-300 hover:text-white flex items-center gap-2 transform hover:translate-x-1 hover:scale-105 transition-all duration-200'
                >
                  <svg
                    class='w-5 h-5'
                    fill='currentColor'
                    viewBox='0 0 24 24'
                    aria-hidden='true'
                  >
                    <path d='M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z' />
                  </svg>
                  Yuppie.ar
                </a>
              </div>
            </>
          )
        }
      </div>
    </div>
  </div>
</Layout>

<style>
  .card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: transform 0.3s ease;
  }

  .card:hover {
    transform: translateY(-5px);
  }

  @media (prefers-reduced-motion: reduce) {
    .card {
      transition: none;
    }
    .card:hover {
      transform: none;
    }
  }

  .bg-gradient {
    background: linear-gradient(
      135deg,
      var(--blue-primary, #3b82f6),
      var(--blue-dark, #1e40af)
    );
  }

  .emoji-container {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  body.emojis-ready .emoji-container {
    opacity: 1;
  }

  .min-h-screen {
    min-height: 100vh;
    min-height: calc(var(--vh, 1vh) * 100);
  }

  .text-shadow {
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
</style>

<script>
  // Precargar emojis y optimizaciones de UX
  document.addEventListener('DOMContentLoaded', () => {
    // Preload emojis with optimized technique
    const emojis = ['😠', '🙁', '😐', '🙂', '😁'];

    // Create a div to ensure emojis are rendered before being shown
    const preloadDiv = document.createElement('div');
    preloadDiv.id = 'emoji-preloader';
    preloadDiv.setAttribute('aria-hidden', 'true');
    preloadDiv.style.position = 'fixed';
    preloadDiv.style.top = '0';
    preloadDiv.style.left = '0';
    preloadDiv.style.opacity = '0.01';
    preloadDiv.style.pointerEvents = 'none';
    preloadDiv.style.zIndex = '-1000';
    preloadDiv.style.fontFamily =
      '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif';

    // Add each emoji with explicit styling
    emojis.forEach((emoji) => {
      const span = document.createElement('span');
      span.style.fontSize = '40px';
      span.style.display = 'inline-block';
      span.style.width = '40px';
      span.style.height = '40px';
      span.style.lineHeight = '40px';
      span.style.textAlign = 'center';
      span.className = 'emoji-text';
      span.textContent = emoji;
      preloadDiv.appendChild(span);
    });

    document.body.appendChild(preloadDiv);

    // Mark emojis as ready
    setTimeout(() => {
      document.body.classList.add('emojis-ready');
    }, 300);

    // Ajustar altura en móviles
    function setVh() {
      const vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);
    }

    setVh();
    window.addEventListener('resize', setVh);
  });
</script>
