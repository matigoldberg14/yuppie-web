---
// /Users/Mati/Desktop/yuppie-web/src/pages/improvement.astro
import Layout from '../layouts/Layout.astro';
import { ImprovementSelector } from '../components/feedback/ImprovementSelector';
import { getRestaurant } from '../services/api';

// Obtener los IDs y validar al inicio
const documentId = Astro.url.searchParams.get('local');
const employeeDocumentId = Astro.url.searchParams.get('employee');

if (!documentId) {
  return Astro.redirect('/');
}

// Obtener datos del restaurante de forma síncrona para el SSR
let restaurantName = '';
let restaurantId = '';

try {
  const restaurant = await getRestaurant(documentId);
  if (restaurant) {
    restaurantName = restaurant.name;
    restaurantId = restaurant.id.toString();
  } else {
    return Astro.redirect('/');
  }
} catch (error) {
  console.error('Error obteniendo datos del restaurante:', error);
  // Continuar con nombre genérico si hay error
  restaurantName = 'Restaurante';
}

// Precarga la siguiente página para reducción adicional de tiempo
const nextUrl = `/comment?local=${documentId}${employeeDocumentId ? `&employee=${employeeDocumentId}` : ''}`;
---

<Layout title={`¿En qué podríamos mejorar? - ${restaurantName}`}>
  <!-- Precargar siguiente página -->
  <link rel="prefetch" href={nextUrl} />
  
  <div class="min-h-screen bg-gradient flex flex-col items-center justify-center p-4">
    <div class="w-full max-w-md">
      <!-- Nombre del restaurante - renderizado desde SSR -->
      <h1 id="restaurantName" class="text-4xl font-bold mb-6 text-center text-shadow">
        {restaurantName || 'Cargando...'}
      </h1>

      <div class="card p-6">
        <!-- Un solo título de mejora -->
        <h2 class="text-2xl font-semibold mb-4 text-center">¿En qué podríamos mejorar?</h2>
        <ImprovementSelector
        restaurantDocumentId={documentId}
        employeeDocumentId={employeeDocumentId || undefined}
        nextUrl={nextUrl}
        client:load
      />
      </div>
    </div>
  </div>
</Layout>

<style>
  .card {
    transition: transform 0.3s ease;
  }
  .card:hover {
    transform: translateY(-5px);
  }
  
  @keyframes skeleton-loading {
    0% {
      background-color: rgba(255, 255, 255, 0.1);
    }
    50% {
      background-color: rgba(255, 255, 255, 0.2);
    }
    100% {
      background-color: rgba(255, 255, 255, 0.1);
    }
  }
  
  .skeleton-loading {
    animation: skeleton-loading 1.5s ease-in-out infinite;
    border-radius: 0.25rem;
  }
</style>

<script define:vars={{ documentId, restaurantName }}>
  // Script optimizado para actualizar nombre si es necesario
  document.addEventListener('DOMContentLoaded', async () => {
    const restaurantNameElement = document.getElementById('restaurantName');
    if (!restaurantNameElement) return;
    
    // Si ya tenemos el nombre del restaurante desde SSR, no hacemos nada
    if (restaurantName && restaurantNameElement.textContent !== 'Cargando...') {
      return;
    }
    
    // Intento de recuperación - verificar si hay datos en localStorage
    try {
      const cachedData = localStorage.getItem(`restaurant_${documentId}`);
      if (cachedData) {
        const { name, timestamp } = JSON.parse(cachedData);
        const cacheAge = Date.now() - timestamp;
        
        // Si la caché tiene menos de 1 hora, usarla
        if (cacheAge < 3600000 && name) {
          restaurantNameElement.textContent = name;
          document.title = `¿En qué podríamos mejorar? - ${name}`;
          return;
        }
      }
    } catch (e) {
      console.error('Error al leer caché local:', e);
    }
    
    // Solo si no tenemos nombre y falló la caché, intenta obtenerlo de nuevo
    if (!restaurantName && restaurantNameElement.textContent === 'Cargando...') {
      try {
        const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/restaurants/${documentId}`);
        const data = await response.json();
        if (data && data.data && data.data.attributes && data.data.attributes.name) {
          const name = data.data.attributes.name;
          restaurantNameElement.textContent = name;
          document.title = `¿En qué podríamos mejorar? - ${name}`;
          
          // Actualizar caché
          localStorage.setItem(`restaurant_${documentId}`, JSON.stringify({
            name: name,
            timestamp: Date.now()
          }));
        } else {
          // Si no hay datos, mostrar genérico
          restaurantNameElement.textContent = 'Tu opinión es importante';
        }
      } catch (error) {
        console.error('Error cargando datos del restaurante:', error);
        restaurantNameElement.textContent = 'Tu opinión es importante';
      }
    }
    
    // Quitar clase de carga si existe
    if (restaurantNameElement.classList.contains('skeleton-loading')) {
      restaurantNameElement.classList.remove('skeleton-loading');
    }
  });
</script>