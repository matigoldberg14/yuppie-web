---
// /Users/Mati/Desktop/yuppie-web/src/pages/rating.astro
import Layout from '../layouts/Layout.astro';
import { RatingForm } from '../components/feedback/Rating';
import { getRestaurant, incrementTaps } from '../services/api';

// Obtener los IDs y validar al inicio
const documentId = Astro.url.searchParams.get('local');
const employeeDocumentId = Astro.url.searchParams.get('employee');

if (!documentId) {
  return Astro.redirect('/404');
}

// Realizar ambas operaciones en paralelo
const [restaurant, _] = await Promise.all([
  getRestaurant(documentId),
  incrementTaps(documentId).catch(err => {
    console.error('Error incrementando taps:', err);
    return null;
  })
]);

// Validar después de obtener los datos
if (!restaurant) {
  return Astro.redirect('/404');
}


// Precargamos la siguiente página para reducir tiempo de transición
const nextUrl = `/improvement?local=${documentId}${employeeDocumentId ? `&employee=${employeeDocumentId}` : ''}`;
---

<Layout title="Califica tu experiencia">
  <!-- Precargar la siguiente página -->
  <link rel="prefetch" href={nextUrl} />
  
  <!-- Asegurarse de que la fuente emojis se cargue primero -->
  <style is:inline>
    @supports (font-variation-settings: normal) {
      .emoji-text {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
        text-rendering: optimizeLegibility;
      }
    }
    
    /* Mostrar fallback mientras se cargan los emojis */
    .emoji-container {
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    body.emojis-ready .emoji-container {
      opacity: 1;
    }
    
    /* Prevent emoji rescaling on iOS */
    .emoji-text {
      -webkit-text-size-adjust: 100%;
      text-size-adjust: 100%;
    }
  </style>
  
  <div class="min-h-screen bg-gradient flex flex-col items-center justify-center p-4">
    <div class="w-full max-w-md">
      <h1 class="text-4xl font-bold mb-6 text-center text-shadow">
        {restaurant.name}
      </h1>
      
      <div class="card p-6">
        <h2 class="text-2xl font-semibold mb-4 text-center">Califica tu experiencia</h2>
        
        <!-- Fallback para emojis con HTML estático (no JavaScript) -->
        <noscript>
          <div class="flex justify-between w-full px-4 py-6 text-center">
            <div class="flex flex-col items-center">😠<div class="mt-2">Muy insatisfecho</div></div>
            <div class="flex flex-col items-center">🙁<div class="mt-2">Insatisfecho</div></div>
            <div class="flex flex-col items-center">😐<div class="mt-2">Neutral</div></div>
            <div class="flex flex-col items-center">🙂<div class="mt-2">Satisfecho</div></div>
            <div class="flex flex-col items-center">😁<div class="mt-2">Muy satisfecho</div></div>
          </div>
        </noscript>
        
        <!-- Contenedor con clase para control de opacidad durante carga -->
        <div class="emoji-container">
          <RatingForm 
            client:load 
            restaurantId={restaurant.id.toString()}
            restaurantDocumentId={documentId}
            employeeDocumentId={employeeDocumentId || undefined}
            nextUrl={nextUrl}
            linkMaps={restaurant.linkMaps}
          />
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .card {
    transition: transform 0.3s ease;
  }
  .card:hover {
    transform: translateY(-5px);
  }
  
  /* Estilos de fallback para emojis */
  noscript .flex {
    display: flex;
  }
  noscript .flex-col {
    flex-direction: column;
  }
  noscript .items-center {
    align-items: center;
  }
  noscript .justify-between {
    justify-content: space-between;
  }
  noscript .mt-2 {
    margin-top: 0.5rem;
  }
  noscript .text-center {
    text-align: center;
  }
  noscript .px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  noscript .py-6 {
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
  }
</style>

<script define:vars={{ documentId, employeeDocumentId }}>
  // Script de precarga de emojis mejorado para dispositivos móviles
  document.addEventListener('DOMContentLoaded', () => {
    // Preload emojis with optimized technique
    const emojis = ['😠', '🙁', '😐', '🙂', '😁'];
    
    // Create a div to ensure emojis are rendered before being shown
    const preloadDiv = document.createElement('div');
    preloadDiv.id = 'emoji-preloader';
    preloadDiv.setAttribute('aria-hidden', 'true');
    preloadDiv.style.position = 'fixed';
    preloadDiv.style.top = '0';
    preloadDiv.style.left = '0';
    preloadDiv.style.opacity = '0.01'; // Tiny bit visible to ensure rendering
    preloadDiv.style.pointerEvents = 'none';
    preloadDiv.style.zIndex = '-1000';
    preloadDiv.style.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif';
    
    // Add each emoji with explicit styling to force full render
    emojis.forEach(emoji => {
      const span = document.createElement('span');
      span.style.fontSize = '40px'; // Match display size
      span.style.display = 'inline-block';
      span.style.width = '40px';
      span.style.height = '40px';
      span.style.lineHeight = '40px';
      span.style.textAlign = 'center';
      span.className = 'emoji-text';
      span.textContent = emoji;
      preloadDiv.appendChild(span);
    });
    
    document.body.appendChild(preloadDiv);
    
    // Give browser some time to render the emojis
    setTimeout(() => {
      // Mark emojis as ready
      document.body.classList.add('emojis-ready');
    }, 300);
    
    // Fetch URL parameters for restaurant management
    const params = new URLSearchParams(window.location.search);
    
    // Compatibilidad con ambos formatos de URL
    const currentRestaurantId = params.get('local') || documentId;
    const currentEmployeeId = params.get('employee') || employeeDocumentId;
    
    // Clean up employee data if not present
    if (!currentEmployeeId) {
      localStorage.removeItem('yuppie_employee');
    }
    
    // Update restaurant and clean previous data if needed
    if (currentRestaurantId) {
      const previousRestaurantId = localStorage.getItem('yuppie_restaurant');
      
      // If it's a different restaurant, clear previous data
      if (previousRestaurantId !== currentRestaurantId) {
        localStorage.removeItem('yuppie_rating');
        localStorage.removeItem('yuppie_improvement');
        localStorage.removeItem('emergency_review_data');
      }
      
      // Update current restaurant ID
      localStorage.setItem('yuppie_restaurant', currentRestaurantId);
    }
    
    // Prefetch the next page - Usar formato cifrado para prefetch
    const prefetchImprovement = document.createElement('link');
    prefetchImprovement.rel = 'prefetch';
    prefetchImprovement.href = '/improvement?local=' + params.get('local');
    document.head.appendChild(prefetchImprovement);
  });
</script>